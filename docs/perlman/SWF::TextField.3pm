.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SWF::TextField 3"
.TH SWF::TextField 3 "2006-02-23" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
SWF::TextField \- SWF TextField class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&        use SWF::TextField;
\&        $textfield = new SWF::TextField([flags]);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Unlike SWF::Text objects, TextFields cannot be rotated, scaled non\-proportionally, or skewed. However, TextFields can be used as form entries and they can use browser-defined fonts. 
.SH "NOTES:"
.IX Header "NOTES:"
.Vb 3
\&    TextField is implemented into Flash since Flash3. 
\&    Most of features for TextFields are available since Flash4.
\&    Simple HTML\-tags in TextField are possible since Flash5.
.Ve
.SH "METHODS"
.IX Header "METHODS"
.IP "new SWF::TextField([flags]);" 4
.IX Item "new SWF::TextField([flags]);"
Creates a TextField object whose behaviour is dictated by \f(CW\*(C`flags\*(C'\fR (see also SWF::Constants): 
.Sp
.Vb 14
\&  SWFTEXTFIELD_NOEDIT:        Non\-editable Textfiled
\&  SWFTEXTFIELD_PASSWORD:      Obscure user input with astricts.
\&  SWFTEXTFIELD_DRAWBOX:       Draw a border around TextField
\&  SWFTEXTFIELD_MULTILINE:     TextFiels may contain multiple lines
\&  SWFTEXTFIELD_WORDWRAP:      Warp text when text reaches TextField border
\&  SWFTEXTFIELD_NOSELECT:      TextField is not selected when user clicks on it
\&  SWFTEXTFIELD_ALIGN_LEFT:    Align text to the left
\&  SWFTEXTFIELD_ALIGN_RIGHT:   Align text to the right
\&  SWFTEXTFIELD_ALIGN_CENTER:  Align text to the center
\&  SWFTEXTFIELD_ALIGN_JUSTIFY: Justify text
\&  SWFTEXTFIELD_HTML:          Add HTML markup string
\&  SWFTEXTFIELD_HASLENGTH:     
\&  SWFTEXTFIELD_USEFONT:       Want to embed font
\&  SWFTEXTFIELD_AUTOSIZE:
.Ve
.Sp
Flags may be combined with the bitwise \s-1OR\s0 operation. For example:
.Sp
.Vb 1
\&    my $t = new SWF::TextField(SWFTEXTFIELD_MULTILINE | SWFTEXTFIELD_WORDWRAP);
.Ve
.IP "$textfield\->addString($string)" 4
.IX Item "$textfield->addString($string)"
Add \f(CW$string\fR to TextField. Text is appended to the existing text.
.IP "$textfield\->align(alignment)" 4
.IX Item "$textfield->align(alignment)"
Set the alignment of the text in the textfield. Possible values are
.Sp
.Vb 4
\&        SWFTEXTFIELD_ALIGN_LEFT
\&        SWFTEXTFIELD_ALIGN_RIGHT
\&        SWFTEXTFIELD_ALIGN_CENTER
\&        SWFTEXTFIELD_ALIGN_JUSTIFY
.Ve
.Sp
By default a SWF::TextField ist left aligned.
.IP "$textfield\->setBounds(width, height)" 4
.IX Item "$textfield->setBounds(width, height)"
Sets the width and height of the textfield.
.IP "$textfield\->setColor(red, green, blue [, alpha])" 4
.IX Item "$textfield->setColor(red, green, blue [, alpha])"
Set the color of the text. An 8 bit value for each parameter. You can use 
the hex or decimal notation. Even mixed.
.Sp
.Vb 2
\&        $tf\->setColor(0xcc,0,0x33);
\&        $tf\->setColor(204,0,51,255);
.Ve
.IP "$textfield\->setFont($font)" 4
.IX Item "$textfield->setFont($font)"
Sets an SWF::Font object \-$font\- to be used in the TextField.
.IP "$textfield\->setPadding(padding)" 4
.IX Item "$textfield->setPadding(padding)"
Set TextField padding.
.IP "$textfield\->setHeight(height)" 4
.IX Item "$textfield->setHeight(height)"
Set the height of font in your textfield.
.IP "$textfield\->setIndentation(indentation)" 4
.IX Item "$textfield->setIndentation(indentation)"
Set the indentation of the first line of a paragraph.
.IP "$textfield\->setLeftMargin(left)" 4
.IX Item "$textfield->setLeftMargin(left)"
Sets the left margin of the textfield.
.IP "$textfield\->setRightMargin(right)" 4
.IX Item "$textfield->setRightMargin(right)"
Sets the right margin of the textfield.
.IP "$textfield\->setMargins(left, right)" 4
.IX Item "$textfield->setMargins(left, right)"
Sets left and right margins of \f(CW$textfield\fR.
.IP "$textfield\->setLineSpacing(linespacing)" 4
.IX Item "$textfield->setLineSpacing(linespacing)"
Sets the space between lines. 
.IP "$textfield\->setName($name)" 4
.IX Item "$textfield->setName($name)"
Assigns a name to the TextField which could be used to reference the TextField within ActionScript.
.IP "$textfield\->addChars(string)" 4
.IX Item "$textfield->addChars(string)"
.SH "AUTHOR"
.IX Header "AUTHOR"
Soheil Seyfaie (soheil at users.sourceforge.net).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1SWF\s0, SWF::Action, SWF::Bitmap, SWF::Button, SWF::Constants, SWF::DisplayItem, SWF::Fill, SWF::Font, SWF::Gradient, SWF::Morph, SWF::Movie, SWF::Shape, SWF::Sound, SWF::Sprite, SWF::TextField, SWF::Text
