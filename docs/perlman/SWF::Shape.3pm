.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SWF::Shape 3"
.TH SWF::Shape 3 "2003-02-01" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
SWF::Shape \- Shape class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use SWF::Shape;
\& my $shape = new SWF::Shape();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SWF::Shape is the fundamental object of a flash movie.
.SH "METHODS"
.IX Header "METHODS"
.IP "new \fISWF::Shape()\fR;" 4
.IX Item "new SWF::Shape();"
Creates a new Shape object.
.ie n .IP "$shape\->moveTo($x, $y\fR); or \f(CW$shape\fR\->movePenTo($x, \f(CW$y);" 4
.el .IP "$shape\->moveTo($x, \f(CW$y\fR); or \f(CW$shape\fR\->movePenTo($x, \f(CW$y\fR);" 4
.IX Item "$shape->moveTo($x, $y); or $shape->movePenTo($x, $y);"
Move the Shape's (imaginary) pen location to ($x, \f(CW$y\fR) in the Shape's coordinate space.
.ie n .IP "$shape\->moveToRelative($dx, $dy\fR); or \f(CW$shape\fR\->movePen($dx, \f(CW$dy);" 4
.el .IP "$shape\->moveToRelative($dx, \f(CW$dy\fR); or \f(CW$shape\fR\->movePen($dx, \f(CW$dy\fR);" 4
.IX Item "$shape->moveToRelative($dx, $dy); or $shape->movePen($dx, $dy);"
Add ($dx, \f(CW$dy\fR) to the Shape's pen current location.
.ie n .IP "$x = $shape\fR\->\fIgetPenX();" 4
.el .IP "$x = \f(CW$shape\fR\->\fIgetPenX()\fR;" 4
.IX Item "$x = $shape->getPenX();"
Returns Pen's x\-coordinates
.ie n .IP "$y = $shape\fR\->\fIgetPenY();" 4
.el .IP "$y = \f(CW$shape\fR\->\fIgetPenY()\fR;" 4
.IX Item "$y = $shape->getPenY();"
Returns Pen's y\-coordinates
.ie n .IP "($x, $y\fR) = \f(CW$shape\fR\->\fIgetPen();" 4
.el .IP "($x, \f(CW$y\fR) = \f(CW$shape\fR\->\fIgetPen()\fR;" 4
.IX Item "($x, $y) = $shape->getPen();"
Returns Pen's (x,y) coordinates
.ie n .IP "$shape\->drawLineTo($x, $y);" 4
.el .IP "$shape\->drawLineTo($x, \f(CW$y\fR);" 4
.IX Item "$shape->drawLineTo($x, $y);"
Draw a line (using current line style \- see \*(L"\fIsetLine()\fR\*(R" method) from the current position to ($x, \f(CW$y\fR).
.ie n .IP "$shape\->drawLine($dx, $dy);" 4
.el .IP "$shape\->drawLine($dx, \f(CW$dy\fR);" 4
.IX Item "$shape->drawLine($dx, $dy);"
Draw a line (using current line style \- see \*(L"\fIsetLine()\fR\*(R" method) from the current position to displacement ($dx, \f(CW$dy\fR).
.ie n .IP "$shape\->drawCurveTo($controlx, $controly\fR, \f(CW$anchorx\fR, \f(CW$anchory);" 4
.el .IP "$shape\->drawCurveTo($controlx, \f(CW$controly\fR, \f(CW$anchorx\fR, \f(CW$anchory\fR);" 4
.IX Item "$shape->drawCurveTo($controlx, $controly, $anchorx, $anchory);"
Draw a quadratic curve (using current line style \- see \*(L"\fIsetLine()\fR\*(R" method) from current pen position to ($anchorx, \f(CW$anchory\fR) using control point ($controlx, \f(CW$controly\fR).
.ie n .IP "$shape\->drawCurve($controldx, $controly\fR, \f(CW$anchorx\fR, \f(CW$anchory);" 4
.el .IP "$shape\->drawCurve($controldx, \f(CW$controly\fR, \f(CW$anchorx\fR, \f(CW$anchory\fR);" 4
.IX Item "$shape->drawCurve($controldx, $controly, $anchorx, $anchory);"
Draw a quadratic curve (using current line style \- see  \*(L"\fIsetLine()\fR\*(R" method) from current pen position to displacement ($anchordx, \f(CW$anchordy\fR) using displacement control point ($controldx, \f(CW$controldy\fR).
.ie n .IP "$shape\->setLine($width, $r\fR, \f(CW$g\fR, \f(CW$b [,$a]);" 4
.el .IP "$shape\->setLine($width, \f(CW$r\fR, \f(CW$g\fR, \f(CW$b\fR [,$a]);" 4
.IX Item "$shape->setLine($width, $r, $g, $b [,$a]);"
Sets Shape's line width and color (\s-1RGB\s0). To remove the Shape's line style call this method without any arguments, i.e. \f(CW$shape\fR\->\fIsetLine()\fR.
.ie n .IP "$fill = $shape\fR\->addFill($r, \f(CW$g\fR, \f(CW$b [,$a]);" 4
.el .IP "$fill = \f(CW$shape\fR\->addFill($r, \f(CW$g\fR, \f(CW$b\fR [,$a]);" 4
.IX Item "$fill = $shape->addFill($r, $g, $b [,$a]);"
Adds a solid fill to \f(CW$shape\fR list of fill styles and returns an SWF::Fill object. This object is used with the  \*(L"\fIsetLine()\fR\*(R" method described below. The default value of \f(CW$a\fR is 0.
.ie n .IP "$fill = $shape\->addFill($bitmap [,FLAG]);" 4
.el .IP "$fill = \f(CW$shape\fR\->addFill($bitmap [,FLAG]);" 4
.IX Item "$fill = $shape->addFill($bitmap [,FLAG]);"
Adds a bitmap fill to \f(CW$shape\fR list of fill styles and returns an SWF::Fill object. This object is used with the \*(L"\fIsetLine()\fR\*(R" method described below. 
.Sp
$bitmap is an SWF::Bitmap object while \s-1FLAG\s0 arguemnt can be \s-1SWFFILL_TILED_BITMAP\s0 or \s-1SWFFILL_CLIPPED_BITMAP\s0. Make sure to import these constants to your package before useing it, i.e. use the following statement:
.Sp
.Vb 1
\&     use SWF::Fill <list of constants>;
.Ve
.Sp
The default value of \s-1FLAG\s0 is \s-1SWFFILL_TILED_BITMAP\s0.
.ie n .IP "$fill = $shape\->addFill($gradient [,FLAG]);" 4
.el .IP "$fill = \f(CW$shape\fR\->addFill($gradient [,FLAG]);" 4
.IX Item "$fill = $shape->addFill($gradient [,FLAG]);"
Adds a gradient fill to \f(CW$shape\fR list of fill styles and returns an SWF::Fill object. This object is used with the \*(L"\fIsetLine()\fR\*(R" method described below. 
.Sp
$gradient is an SWF::Gradient object while \s-1FLAG\s0 arguemnt can be \s-1SWFFILL_LINEAR_GRADIENT\s0 or \s-1SWFFILL_RADIAL_GRADIENT\s0.Make sure to import these constants to your package before useing it, i.e. use the following statement:
.Sp
.Vb 1
\&     use SWF::Fill <list of constants>;
.Ve
.Sp
The default value of \s-1FLAG\s0 is \s-1SWFFILL_LINEAR_GRADIENT\s0.
.IP "$shape\->setLeftFill($fill);" 4
.IX Item "$shape->setLeftFill($fill);"
Sets the fill on the left side of the edge. \f(CW$fill\fR is an SWF::Fill object returned from \*(L"addFill\*(R" method.
.ie n .IP "$shape\->setLeftFill($r, $g\fR, \f(CW$b [,$a]);" 4
.el .IP "$shape\->setLeftFill($r, \f(CW$g\fR, \f(CW$b\fR [,$a]);" 4
.IX Item "$shape->setLeftFill($r, $g, $b [,$a]);"
This is another way of saying:
.Sp
.Vb 2
\&     my $fill = $shape\->addSolidFill($r, $g, $b [,$a]);
\&     $shape\->setLeftFill($fill);
.Ve
.IP "$shape\->setRightFill($fill);" 4
.IX Item "$shape->setRightFill($fill);"
Sets the fill on the right side of the edge. \f(CW$fill\fR is an SWF::Fill object returned from \*(L"addFill\*(R" method.
.ie n .IP "$shape\->setRightFill($r, $g\fR, \f(CW$b [,$a]);" 4
.el .IP "$shape\->setRightFill($r, \f(CW$g\fR, \f(CW$b\fR [,$a]);" 4
.IX Item "$shape->setRightFill($r, $g, $b [,$a]);"
This is another way of saying:
.Sp
.Vb 2
\&     my $fill = $shape\->addSolidFill($r, $g, $b [,$a]);
\&     $shape\->setRightFill($fill);
.Ve
.IP "$shape\->drawCircle($r) \- Don't use. Interface may change." 4
.IX Item "$shape->drawCircle($r) - Don't use. Interface may change."
Draws a circle with radious \f(CW$r\fR.
.ie n .IP "$shape\->drawArc($r, $startAngle\fR, \f(CW$endAngle)  \- Don't use. Interface may change." 4
.el .IP "$shape\->drawArc($r, \f(CW$startAngle\fR, \f(CW$endAngle\fR)  \- Don't use. Interface may change." 4
.IX Item "$shape->drawArc($r, $startAngle, $endAngle)  - Don't use. Interface may change."
.SH "AUTHOR"
.IX Header "AUTHOR"
Soheil Seyfaie (soheil at users.sourceforge.net).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1SWF\s0, SWF::Action, SWF::Bitmap, SWF::Button, SWF::Constants, SWF::DisplayItem, SWF::Fill, SWF::Font, SWF::Gradient, SWF::Morph, SWF::Movie, SWF::Shape, SWF::Sound, SWF::Sprite, SWF::TextField, SWF::Text
