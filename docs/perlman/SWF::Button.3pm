.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SWF::Button 3"
.TH SWF::Button 3 "2006-02-23" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
SWF::Button \- SWF button class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use SWF::Button;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Creates buttons for flash movies.
.SH "METHODS"
.IX Header "METHODS"
.IP "new \fISWF::Button()\fR;" 4
.IX Item "new SWF::Button();"
Creates a new Button object.
.IP "$button\->addShape($shape, \s-1FLAG\s0);" 4
.IX Item "$button->addShape($shape, FLAG);"
Adds \f(CW$shape\fR to the button. Valid FLAGs are:
.Sp
.Vb 4
\&    SWFBUTTON_HIT
\&    SWFBUTTON_UP
\&    SWFBUTTON_DOWN
\&    SWFBUTTON_OVER
.Ve
.IP "$button\->setOver($shape);" 4
.IX Item "$button->setOver($shape);"
Shortcut for \f(CW$button\fR\->addShape($shape, \s-1SWFBUTTON_OVER\s0);
.IP "$button\->setHit($shape);" 4
.IX Item "$button->setHit($shape);"
Shortcut for \f(CW$button\fR\->addShape($shape, \s-1SWFBUTTON_HIT\s0);
.IP "$button\->setUp($shape);" 4
.IX Item "$button->setUp($shape);"
Shortcut for \f(CW$button\fR\->addShape($shape, \s-1SWFBUTTON_UP\s0);
.IP "$button\->setDown($shape);" 4
.IX Item "$button->setDown($shape);"
Shortcut for \f(CW$button\fR\->addShape($shape, \s-1SWFBUTTON_DOWN\s0);
.IP "$button\->setAction($action [,FLAG]);" 4
.IX Item "$button->setAction($action [,FLAG]);"
Adds \f(CW$action\fR object (see SWF::Action). Valid FLAGs are:
.Sp
.Vb 6
\&    SWFBUTTON_MOUSEUP
\&    SWFBUTTON_MOUSEOVER
\&    SWFBUTTON_MOUSEOUT
\&    SWFBUTTON_MOUSEDOWN
\&    SWFBUTTON_DRAGOVER
\&    SWFBUTTON_DRAGOUT
.Ve
.Sp
\&\s-1SWFBUTTON_MOUSEUP\s0 is the default value of \s-1FLAG\s0.
.IP "$button\->setMenu(0|1);" 4
.IX Item "$button->setMenu(0|1);"
Parameter is 0 (off) or 1(on).
Can be used for a slight different behavior of buttons.
.SH "AUTHOR"
.IX Header "AUTHOR"
wrapper written by
.PP
Soheil Seyfaie   (soheil at users dot sourceforge dot net)
Peter Liscovius (peterdd at users dot sourceforge dot net)
.PP
and many others.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1SWF\s0, SWF::Action, SWF::Shape, SWF::Movie, SWF::MovieClip
